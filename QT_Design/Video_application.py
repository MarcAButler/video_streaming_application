# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Video_application.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *


class Ui_MainWindow(QWidget):
    # def __init__(self):
    #     super(Ui_MainWindow, self).__init__()

    #     self.v_layout = QVBoxLayout()

    #     # QLabel() is a widget that provides a text or image display--important for displaying video
    #     self.video_feed = QLabel()


    #     self.v_layout.addWidget(self.video_feed)

    #     self.CancelBTN = QPushButton("Cancel")
    #     self.CancelBTN.clicked.connect(self.StopFeed)

    #     self.v_layout.addWidget(self.CancelBTN)

    #     # Create an instance of a video thread to display the video so that it does not catch the MainWindow class in an infinite loop
    #     self.video_thread = videoThread()

    #     # Starts the thread
    #     self.video_thread.start()
    #     # Calls the Slot
    #     self.video_thread.updatedImage.connect(self.ImageUpdateSlot)

    #     self.setLayout(self.v_layout)

    # Helps handled the emited signal
    def ImageUpdateSlot(self, Image):
        self.video_feed.setPixmap(QPixmap.fromImage(Image))

    def StopFeed(self):
        self.video_thread.stop()

    def setupUi(self, MainWindow):
        #super(Ui_MainWindow, self).setupUi(MainWindow)
        self.v_layout = QVBoxLayout()

        # QLabel() is a widget that provides a text or image display--important for displaying video
        self.video_feed = QLabel()


        self.v_layout.addWidget(self.video_feed)

        self.CancelBTN = QPushButton("Cancel")
        self.CancelBTN.clicked.connect(self.StopFeed)

        self.v_layout.addWidget(self.CancelBTN)

        # Create an instance of a video thread to display the video so that it does not catch the MainWindow class in an infinite loop
        self.video_thread = videoThread()

        # Starts the thread
        self.video_thread.start()
        # Calls the Slot
        self.video_thread.updatedImage.connect(self.ImageUpdateSlot)

        self.setLayout(self.v_layout)

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(848, 532)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.video_feed = QtWidgets.QLabel(self.centralwidget)
        self.video_feed.setMinimumSize(QtCore.QSize(600, 0))
        self.video_feed.setText("")
        self.video_feed.setObjectName("video_feed")
        self.horizontalLayout_3.addWidget(self.video_feed)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout_3.addWidget(self.textBrowser)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 75))
        self.lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 848, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "You:"))
        self.pushButton.setText(_translate("MainWindow", "Send"))
        self.pushButton_2.setText(_translate("MainWindow", "Mute"))
# A worker that handles the video
class videoThread(QThread):
    # Creates a signal to later be emited in order to call the ImageUpdateSlot in the main window
    updatedImage = pyqtSignal(QImage)

    # Start the thread
    def run(self):
        # Used to shut off the thread
        self.ThreadActive = True
        # Uses the webcam
        Capture = cv2.VideoCapture(0)

        while self.ThreadActive:
            # Returns a tuple of a return value, and and image (return, image)
            return_val, image = Capture.read()
            
            # If there was a returned value--no issue returning a frame
            if return_val:
                # Convert the frame into an RGB image
                image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                # Flips the image on the vertical axis denoted by the "1"
                image = cv2.flip(image, 1)
                converted_image = QImage(image.data, image.shape[1], image.shape[0], QImage.Format_RGB888)
                image = converted_image.scaled(640, 480, Qt.KeepAspectRatio)

                # Sends a message to the main window class to be transmitted--stored in the Pic variable
                self.updatedImage.emit(image)


    def stop(self):
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    #ui.__init__()
    MainWindow.show()
    sys.exit(app.exec_())
